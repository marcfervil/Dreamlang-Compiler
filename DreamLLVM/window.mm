#import <Foundation/Foundation.h>#import <Cocoa/Cocoa.h>#import "window.h"#define HASHSIZE 1022#ifndef mac_window#define mac_windowusing namespace std;@interface DreamWindow : NSWindow-(void)windowWillClose:(NSNotification *)notification;@end@interface DreamView: NSView-(void)addButton:(const char *)text :(dreamObj *) func;@endextern "C"{@implementation DreamWindow : NSWindow    -(void)windowWillClose:(NSNotification *)notification{   // NSLog(@"closing");    [NSApp terminate:self];}- (id)initWithContentRect:(NSRect)contentRect styleMask:(NSUInteger)windowStyle backing:(NSBackingStoreType)bufferingType defer:(BOOL)deferCreation{    self = [super initWithContentRect:contentRect styleMask:windowStyle backing:bufferingType defer:deferCreation];    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(windowWillClose:) name:NSWindowWillCloseNotification object:nil];    return self;}- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)theApplication {     return YES;}@end@implementation DreamView : NSView     // implementation of DemoView classNSString *title ;NSMutableArray *widgets = [NSMutableArray array];- (IBAction) zoomOut : (id) sender {   NSLog(@"zoom out!");}-(void)addButton:(const char *)text func:(dreamObj *) func{        int x = 0; //possition x    int y = 0; //possition y        int width = 130;    int height = 40;        NSButton *dreamButton = [[NSButton alloc] initWithFrame:NSMakeRect(x, y, width, height)];        [dreamButton setTitle: @(text)];    [dreamButton setButtonType:NSButtonTypeMomentaryLight]; //Set what type button You want    [dreamButton setBezelStyle:NSBezelStyleRounded]; //Set what style You want        [dreamButton setTarget:self];    [dreamButton setAction:@selector(zoomOut:)];    [widgets addObject: dreamButton];}-(id)initWithFrame:(CGRect)frame {        self = [super initWithFrame:frame];        [self addButton: "foewkp" func: new dreamObj()];      //    //dreamFunc();    for (id object in widgets) {        // do something with object                [self addSubview: (NSControl *)object];    }        return self;}- (void)drawRect:(NSRect)rect   // instance method implementation{        }@end  // end of DemoView implementation/* * setup(  ) performs the functions that would normally be performed by * loading a nib file. */DreamView * setup() {    NSWindow *myWindow;    DreamView *myView;    NSRect graphicsRect;        graphicsRect = NSMakeRect(100.0, 350.0, 400.0, 400.0);        myWindow = [ [DreamWindow alloc]                initWithContentRect: graphicsRect                styleMask:NSWindowStyleMaskTitled                |NSWindowStyleMaskClosable                |NSWindowStyleMaskMiniaturizable                backing:NSBackingStoreBuffered                defer:NO ];        [myWindow setTitle:title];    myView = [[DreamView alloc] initWithFrame:graphicsRect] ;        [myWindow setContentView:myView ];            [myWindow makeKeyAndOrderFront: nil];    [myWindow setLevel:NSFloatingWindowLevel];    return myView;}//Widget::Widget(const Widget &original) noexcept : Widget(original._object) {}void Widget::add_button(const char * text, dreamObj * onClick){    }Widget::Widget(id object) : _object(object){    }void * Widget::operator new(std::size_t n){    void * const p = malloc(n);    // handle p == 0    return p;}void Widget::operator delete(void * p) // or delete(void *, std::size_t){    free(p);}void Widget::start(){    [NSApp run];}Widget * mac_init(char * str){    //  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];        // create the application object    NSApp = [NSApplication sharedApplication];    title = @(str);        /*    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{        //  NSLog(@"wow wait for this");        title = @("fewfew");    });*/        // set up the window and drawing mechanism    DreamView * x = setup();        // run the main event loop    // [NSApp run];        // [self performSelectorInBackground:@selector(startApp(NSApp)) withObject:nil]    //  dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{    // startApp(NSApp);    //[NSApp run];    // });    return new Widget(x);}}#endif